@using ClassRegistrationApplication2025.Infrastructure.Persistence.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using MudBlazor; 
@using ClassRegistrationApplication2025.Application.DTOs
@inject AuthenticationStateProvider AuthProvider
@inject IUserService UserService
@inject IWebHostEnvironment Env
@inject ISnackbar Snackbar
@inherits LayoutComponentBase
@inject NavigationManager Navigation

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<CascadingAuthenticationState>
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Class Registration</MudText>
        <MudSpacer />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        <AuthorizeView>
            <Authorized>
                @{
                    var cleanId = context.User.Identity?.Name?.Split('\\').Last();
                }

                @if (_currentUser is not null)
                {
                    <MudText Class="mr-4" Typo="Typo.subtitle2">@_currentUser.Name</MudText>
                }
                else if (cleanId is not null)
                {
                    <MudText Class="mr-4" Typo="Typo.subtitle2">@cleanId</MudText>
                }
                else
                {
                    <MudText Class="mr-4" Typo="Typo.subtitle2">Loading...</MudText>
                }
                <MudButton OnClick="Logout" Color="Color.Inherit">Logout</MudButton>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="pt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


</CascadingAuthenticationState>




<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;
    private bool _userInitDone = false;
    private UserDto? _currentUser;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };

        if (_userInitDone) return;
        _userInitDone = true;

        var principal = (await AuthProvider.GetAuthenticationStateAsync()).User;
        var adUser = principal?.Identity?.Name;
        var userId = adUser?.Split('\\').Last();

        if (string.IsNullOrWhiteSpace(adUser))
        {
            if (Env.IsDevelopment())
            {
                adUser = "dev-user";
                userId = "dev-user";
            }
            else
            {
                Snackbar.Add("Authentication failed.", Severity.Error);
                Navigation.NavigateTo("/Error");
                return;
            }
        }

        try
        {
            _currentUser = await UserService.GetOrCreateCurrentUserAsync(userId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Registration error: {ex.Message}", Severity.Error);
            Navigation.NavigateTo("/Error");
        }
    }

    private void Logout()
    {
        Navigation.NavigateTo("/logout", forceLoad: true);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };


}


