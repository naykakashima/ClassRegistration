@page "/subjects/manage-subjects"

@using ClassRegistrationApplication2025.Application.DTOs
@using ClassRegistrationApplication2025.Application.UseCases
@using ClassRegistrationApplication2025.Presentation.Components
@using Microsoft.JSInterop
@using MudBlazor

@inject GetAllSubjectsUseCase GetSubjectsUseCase
@inject DeleteSubjectUseCase DeleteSubjectUseCase
@inject NavigationManager Nav
@inject GetAllClassesBySubjectIdUseCase GetAllClassesBySubjectIdUseCase
@inject GetRegisteredUsersUseCase GetRegisteredUsersUseCase
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<title>Manage Subjects</title>

<MudContainer>
    <MudStack Class="py-6 d-flex justify-space-between" Row="true">
        <MudText Typo="Typo.h5" Class="mb-4">Manage Classes</MudText>
    </MudStack>

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else if (!Subjects.Any())
    {
        <MudText>No subjects found.</MudText>
    }
    else
    {
        <SubjectsTableWithEdit Subjects="Subjects"
                               OnEdit="HandleEdit"
                               OnSurvey="HandleSurvey"
                               OnDelete="HandleDelete"
                               OnExportExcel="HandleExport"
                               OnViewAttendance="HandleAttendance" />
    }
</MudContainer>

@code {
    private List<SubjectSummaryDto> Subjects = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSubjects();
    }

    private async Task LoadSubjects()
    {
        isLoading = true;
        try
        {
            Subjects = await GetSubjectsUseCase.ExecuteAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to load subjects: " + ex.Message, Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void HandleEdit(Guid subjectId)
    {
        Nav.NavigateTo($"/subjects/edit/{subjectId}");
    }

    private void HandleSurvey(Guid subjectId)
    {
        var subject = Subjects.FirstOrDefault(s => s.Id == subjectId);
        var slugTitle = Slugify(subject.Title);
        Nav.NavigateTo($"/subjects/{subjectId}/survey/{slugTitle}");
    }

    private async Task HandleDelete(Guid subjectId)
    {
        var subject = Subjects.FirstOrDefault(s => s.Id == subjectId);
        if (subject == null || subject.ClassCount > 0)
        {
            Snackbar.Add("Cannot delete a subject that has sessions.", Severity.Warning);
            return;
        }

        var confirmed = await ShowConfirmationDialog($"Delete subject '{subject.Title}'?");
        if (!confirmed)
            return;

        try
        {
            await DeleteSubjectUseCase.ExecuteAsync(subjectId);
            Subjects.Remove(subject);
            Snackbar.Add("Subject deleted.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to delete subject: " + ex.Message, Severity.Error);
        }
    }

    private async Task HandleExport(Guid subjectId)
    {
        try
        {
            var classes = await GetAllClassesBySubjectIdUseCase.ExecuteAsync(subjectId);
            if (classes == null || !classes.Any())
            {
                Snackbar.Add("No classes found for this subject.", Severity.Info);
                return;
            }

            using var workbook = new ClosedXML.Excel.XLWorkbook();
            var worksheet = workbook.Worksheets.Add("Subject Registrations");

            // Headers
            string[] headers = {
            "Class Name", "Session Name", "Presenter", "Date", "Start Time", "End Time",
            "User ID", "User Name", "Registered At"
        };

            for (int i = 0; i < headers.Length; i++)
            {
                worksheet.Cell(1, i + 1).Value = headers[i];
                worksheet.Cell(1, i + 1).Style.Font.Bold = true;
            }

            int row = 2;
            int totalRegistrations = 0;

            foreach (var classItem in classes)
            {
                var users = await GetRegisteredUsersUseCase.ExecuteAsync(classItem.Id);
                if (users == null || !users.Any())
                    continue; // Skip classes without registrations

                foreach (var user in users)
                {
                    worksheet.Cell(row, 1).Value = classItem.ClassName;
                    worksheet.Cell(row, 2).Value = classItem.SessionName;
                    worksheet.Cell(row, 3).Value = classItem.Presenter;
                    worksheet.Cell(row, 4).Value = classItem.Date.ToString("yyyy-MM-dd");
                    worksheet.Cell(row, 5).Value = classItem.StartTime.ToString();
                    worksheet.Cell(row, 6).Value = classItem.EndTime.ToString();

                    worksheet.Cell(row, 7).Value = user.UserID;
                    worksheet.Cell(row, 8).Value = user.UserName;
                    worksheet.Cell(row, 9).Value = user.RegisteredAt.ToString("yyyy-MM-dd HH:mm");

                    row++;
                    totalRegistrations++;
                }
            }

            if (totalRegistrations == 0)
            {
                Snackbar.Add("No registrations found for this subject.", Severity.Info);
                return;
            }

            // Summary row:
            worksheet.Cell(row + 1, 1).Value = "Total Registrations:";
            worksheet.Cell(row + 1, 2).Value = totalRegistrations;
            worksheet.Range($"A{row + 1}:B{row + 1}").Style.Font.Bold = true;

            worksheet.Columns().AdjustToContents();
            worksheet.SheetView.FreezeRows(1);

            using var stream = new MemoryStream();
            workbook.SaveAs(stream);
            var content = Convert.ToBase64String(stream.ToArray());

            var subject = Subjects.FirstOrDefault(s => s.Id == subjectId);
            var safeTitle = subject?.Title?.Replace(" ", "_") ?? "Subject";
            var fileName = $"{safeTitle}_Registrations.xlsx";

            await JS.InvokeVoidAsync("downloadFile", fileName, content, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");

            Snackbar.Add("Excel export completed.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to export Excel: {ex.Message}", Severity.Error);
        }
    }


    private async Task HandleAttendance(Guid subjectId)
    {
        var parameters = new DialogParameters { ["SubjectId"] = subjectId };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<SubjectAttendanceDialog>("View Attendance", parameters, options);
    }

    private async Task<bool> ShowConfirmationDialog(string message)
    {
        var dialog = DialogService.Show<ConfirmationDialog>("Confirm", new DialogParameters { ["ContentText"] = message });
        var result = await dialog.Result;
        return !result.Canceled;
    }

    public static string Slugify(string title)
    {
        return title.ToLower().Replace(" ", "-").Replace("&", "and");
    }
}
