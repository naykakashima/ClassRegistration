@page "/subjects/{subjectId:guid}/survey/edit/{subjectTitle}"
@using ClassRegistrationApplication2025.Application.DTOs
@using ClassRegistrationApplication2025.Application.Interfaces
@using ClassRegistrationApplication2025.Application.UseCases
@using ClassRegistrationApplication2025.Presentation.Components
@using SurveyBuilder.Components
@using global::SurveyBuilder.Models
@using global::SurveyBuilder.Services
@using MudBlazor

@inject ISubjectSurveyService SurveyService
@inject GetSurveyBySubjectIdUseCase GetSurveyUseCase
@inject ISurveyJsonService JsonService
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<title>Edit Survey for Subject</title>

<MudStack Class="d-flex justify-space-between flex-grow-1 gap-4" Row="true">
    <MudText Typo="Typo.h5">Editing Survey: @subjectTitle</MudText>

    <MudPaper Class="pa-4 d-inline-flex align-center gap-4 pa-4">
        <MudToggleIconButton @bind-Toggled="_isReleased"
                             Icon="@Icons.Material.Filled.AlarmOff"
                             Color="@Color.Error"
                             ToggledIcon="@Icons.Material.Filled.AlarmOn"
                             ToggledColor="@Color.Success"
                             title="@(_isReleased ? "Released" : "Closed")" />
        <MudText>Survey is @(_isReleased ? "Released" : "Closed")</MudText>
    </MudPaper>
</MudStack>

@if (Survey == null)
{
    <MudText Color="Color.Error">Survey not found or failed to load.</MudText>
}
else
{
    <SurveyBuilder Survey="JsonService.Deserialize(Survey.JsonDefinition)" SurveyChanged="@OnSurveyChanged" />

    <MudStack Class="d-flex justify-center mt-4">
        <MudButton OnClick="UpdateDb" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" StartIcon="@Icons.Material.Filled.Save">
            Update Survey
        </MudButton>

        <MudButton OnClick="ConfirmDelete" Color="Color.Error" Variant="Variant.Filled" Size="Size.Large" StartIcon="@Icons.Material.Filled.Delete">
            Delete Survey
        </MudButton>
    </MudStack>
}

@code {
    [Parameter] public Guid subjectId { get; set; }
    [Parameter] public string subjectTitle { get; set; }

    private bool _isReleased;
    private bool _tempIsReleased;

    private SubjectSurveyDto? Survey;
    private string Serialized = "";

    protected override async Task OnInitializedAsync()
    {
        Survey = await GetSurveyUseCase.ExecuteAsync(subjectId);

        if (Survey is null)
        {
            Snackbar.Add("Survey not found for this subject.", Severity.Error);
            return;
        }

        Serialized = Survey.JsonDefinition; 
        _isReleased = Survey.IsReleased;
        _tempIsReleased = _isReleased; // create a snapshot of original value
    }

    private Task OnSurveyChanged(SurveyModel updated)
    {
        Serialized = JsonService.Serialize(updated);
        if (Survey is not null)
        {
            Survey.JsonDefinition = Serialized;
            Survey.Title = updated.Title;
            Survey.Description = updated.Description;
        }

        return Task.CompletedTask;
    }

    private async Task UpdateDb()
    {
        if (Survey is null || string.IsNullOrWhiteSpace(Survey.Title) || string.IsNullOrWhiteSpace(Survey.JsonDefinition))
        {
            Snackbar.Add("Survey title and content are required.", Severity.Warning);
            return;
        }

        try
        {
            if (_tempIsReleased != _isReleased) // only send update if state changed
            {
                if (_isReleased)
                {
                    await SurveyService.ReleaseSurveyAsync(Survey.Id);
                    Snackbar.Add("Survey is now released to students.", Severity.Success);
                }
                else
                {
                    await SurveyService.CloseSurveyAsync(Survey.Id);
                    Snackbar.Add("Survey has been closed.", Severity.Info);
                }

                // update the original snapshot
                _tempIsReleased = _isReleased;
            }

            await SurveyService.UpdateAsync(Survey);
            Snackbar.Add("Survey successfully updated!", Severity.Success);
            Nav.NavigateTo($"/subjects/manage-subjects");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating survey: {ex.Message}", Severity.Error);

            // roll back to previous state in case of failure
            _isReleased = _tempIsReleased;
            StateHasChanged();
        }
    }


    private async Task ConfirmDelete()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Do you really want to delete the survey '{Survey?.Title}'? This action cannot be undone." },
            { "ButtonText", "Delete" }
        };

        var dialog = await DialogService.ShowAsync<ConfirmDeleteDialog>("Confirm Delete", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)  
        {
            await DeleteSurvey();
        }
    }


    private async Task DeleteSurvey()
    {
        if (Survey is null)
        {
            Snackbar.Add("No survey loaded to delete.", Severity.Warning);
            return;
        }

        try
        {
            await SurveyService.DeleteAsync(Survey.Id);
            Snackbar.Add("Survey deleted successfully.", Severity.Success);
            Nav.NavigateTo("/subjects/manage-subjects"); // Navigate back to subject page
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to delete survey: {ex.Message}", Severity.Error);
        }
    }
}
