@page "/subjects/{subjectId:guid}/survey/edit/{subjectTitle}"
@using ClassRegistrationApplication2025.Application.DTOs
@using ClassRegistrationApplication2025.Application.Interfaces
@using ClassRegistrationApplication2025.Application.UseCases
@using SurveyBuilder.Components
@using global::SurveyBuilder.Models
@using global::SurveyBuilder.Services
@using MudBlazor

@inject ISubjectSurveyService SurveyService
@inject GetSurveyBySubjectIdUseCase GetSurveyUseCase
@inject ISurveyJsonService JsonService
@inject NavigationManager Nav
@inject ISnackbar Snackbar

<title>Edit Survey for Subject</title>

<MudStack Row="true">
    <MudText Typo="Typo.h5">Editing Survey: @subjectTitle</MudText>
</MudStack>

@if (Survey == null)
{
    <MudText Color="Color.Error">Survey not found or failed to load.</MudText>
}
else
{
    <SurveyBuilder Survey="JsonService.Deserialize(Survey.JsonDefinition)" SurveyChanged="@OnSurveyChanged" />

    <MudStack Class="d-flex justify-center mt-4">
        <MudButton OnClick="UpdateDb" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" StartIcon="@Icons.Material.Filled.Save">
            Update Survey
        </MudButton>
    </MudStack>
}

@code {
    [Parameter] public Guid subjectId { get; set; }
    [Parameter] public string subjectTitle { get; set; }

    private SubjectSurveyDto? Survey;
    private string Serialized = "";

    protected override async Task OnInitializedAsync()
    {
        Survey = await GetSurveyUseCase.ExecuteAsync(subjectId);

        if (Survey is null)
        {
            Snackbar.Add("Survey not found for this subject.", Severity.Error);
            return;
        }

        Serialized = Survey.JsonDefinition;
    }

    private Task OnSurveyChanged(SurveyModel updated)
    {
        Serialized = JsonService.Serialize(updated);
        if (Survey is not null)
        {
            Survey.JsonDefinition = Serialized;
            Survey.Title = updated.Title;
            Survey.Description = updated.Description;
        }

        return Task.CompletedTask;
    }

    private async Task UpdateDb()
    {
        if (Survey is null || string.IsNullOrWhiteSpace(Survey.Title) || string.IsNullOrWhiteSpace(Survey.JsonDefinition))
        {
            Snackbar.Add("Survey title and content are required.", Severity.Warning);
            return;
        }

        try
        {
            await SurveyService.UpdateAsync(Survey);
            Snackbar.Add("Survey successfully updated!", Severity.Success);
            Nav.NavigateTo($"/subjects/{subjectId}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating survey: {ex.Message}", Severity.Error);
        }
    }
}
