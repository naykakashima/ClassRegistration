@page "/classes"
@using ClassRegistrationApplication2025.Application.DTOs
@using ClassRegistrationApplication2025.Application.UseCases
@using ClassRegistrationApplication2025.Domain.Enums
@using ClassRegistrationApplication2025.Infrastructure.Persistence.Interfaces
@using ClassRegistrationApplication2025.Infrastructure.Persistence.Repositories
@using ClassRegistrationApplication2025.Presentation.Components
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@inject GetAllClassesUseCase GetAllClassesUseCase
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager
@inject IRegistrationRepository RegistrationRepository
@inject IUserService UserService
@inject ISnackbar Snackbar

<Microsoft.AspNetCore.Components.Web.PageTitle> Classes </Microsoft.AspNetCore.Components.Web.PageTitle>

<MudContainer>
    <MudText Typo="Typo.h5" Class="mb-4">Available Classes</MudText>
    
    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="my-4" />
        <MudText>Loading classes...</MudText>
    }
    else if (classes == null || !classes.Any())
    {
        <MudAlert Severity="Severity.Info">No classes found.</MudAlert>
    }
    else
    {
        <ClassesTable Classes="classes" OnRegister="Register" RegisteredClassIds="_userRegisteredClassIds" />
    }
</MudContainer>

@code {
    private List<ClassSummaryDto> classes = new();
    private bool isLoading = true;
    private HashSet<Guid> _userRegisteredClassIds = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            classes = await GetAllClassesUseCase.ExecuteAsync();

            foreach (var classItem in classes)
            {
                var endDateTime = classItem.Date.Date + classItem.EndTime;

                if (endDateTime < DateTime.Now)
                {
                    classItem.Status = ClassStatus.Closed;
                }
            }

            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var userIdString = authState.User.Identity?.Name?.Split('\\').Last();
            if (!string.IsNullOrEmpty(userIdString))
            {
                var userDto = await UserService.GetOrCreateCurrentUserAsync(userIdString);
                var ids = await RegistrationRepository.GetClassIdsByUserAsync(userDto.Id);
                _userRegisteredClassIds = ids.ToHashSet();
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load classes: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void Register(Guid classId) => NavigationManager.NavigateTo($"/register/{classId}");
}