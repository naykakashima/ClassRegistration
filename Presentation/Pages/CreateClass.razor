@page "/create-class"
@attribute [Authorize(Roles = "ClassManager, SuperAdmin")]

@using ClassRegistrationApplication2025.Application.DTOs
@using ClassRegistrationApplication2025.Application.UseCases
@using ClassRegistrationApplication2025.Domain.Enums
@using ClassRegistrationApplication2025.Presentation.Pages.Validators
@using ClassRegistrationApplication2025.Infrastructure.Persistence.Interfaces
@using ClassRegistrationApplication2025.Presentation.Components

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@inject AuthenticationStateProvider AuthProvider
@using static System.Net.WebRequestMethods
@inject ISnackbar Snackbar
@inject CreateClassUseCase UseCase
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IHttpContextAccessor _http

<PageTitle> Create A Class </PageTitle>

<AuthorizeRoute RequiredRole="@Role.ClassManager"> 
    <MudPaper Class="pa-4">
        <!-- Title section -->
        <div class="d-flex align-center mb-4">
            <MudText Typo="Typo.h5">Create A Class</MudText>
        </div>

        <!-- Centered form section -->
        <div class="d-flex justify-center">
            <MudGrid>
                <MudItem xl="8" sm="12">
                    <MudPaper Class="pa-4" Elevation="5">
                        <MudForm Model="@formModel"
                                 @ref="form"
                                 @bind-IsValid="@success"
                                 @bind-Errors="@errors"
                                 Validator="validator.Validate">

                            <MudTextField T="string"
                                          @bind-Value="formModel.ClassName"
                                          For="@(() => formModel.ClassName)"
                                          Label="Class Name"
                                          Required="true"
                                          RequiredError="Class Name is required"
                                          OnBlur="@(() => SetTouched(nameof(formModel.ClassName)))"
                                          Validation="@(new Func<string, Task<IEnumerable<string>>>(val => validator.ConditionalValidateValue(HasTouched)(formModel, nameof(formModel.ClassName))))" />

                            <MudTextField T="string"
                                          @bind-Value="formModel.PresenterName"
                                          For="@(() => formModel.PresenterName)"
                                          Label="Facilitator Name"
                                          Required="true"
                                          RequiredError="Facilitator Name is required"
                                          OnBlur="@(() => SetTouched(nameof(formModel.PresenterName)))"
                                          Validation="@(new Func<string, Task<IEnumerable<string>>>(val => validator.ConditionalValidateValue(HasTouched)(formModel, nameof(formModel.PresenterName))))" />

                            <MudDatePicker T="DateTime?"
                                           OverflowBehavior="OverflowBehavior.FlipNever"
                                           PickerVariant="PickerVariant.Dialog"
                                           @bind-Date="formModel.Date"
                                           Label="Date"
                                           For="@(() => formModel.Date)"
                                           Validation="@(validator.ValidateValue)" />

                            <MudTimePicker T="TimeSpan?"
                                           PickerVariant="PickerVariant.Dialog"
                                           @bind-Time="formModel.StartTime"
                                           Label="Start Time"
                                           For="@(() => formModel.StartTime)"
                                           Validation="@(validator.ValidateValue)" />

                            <MudTimePicker T="TimeSpan?"
                                           PickerVariant="PickerVariant.Dialog"
                                           @bind-Time="formModel.EndTime"
                                           Label="End Time"
                                           For="@(() => formModel.EndTime)"
                                           Validation="@(validator.ValidateValue)" />

                            <MudNumericField T="int"
                                             @bind-Value="formModel.MaxSlots"
                                             Label="Max Slots"
                                             For="@(() => formModel.MaxSlots)"
                                             OnBlur="@(() => SetTouched(nameof(formModel.MaxSlots)))"
                                             Validation="@(new Func<string, Task<IEnumerable<string>>>(val => validator.ConditionalValidateValue(HasTouched)(formModel, nameof(formModel.MaxSlots))))" />

                            <MudButton OnClick="HandleValidSubmit" Disabled="@(!success)">Submit</MudButton>

                        </MudForm>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </div>
    </MudPaper>
</AuthorizeRoute>


@code {
    bool success;
    string[] errors = { };
    MudForm? form;
    private CreateClassDto formModel = new();
    private CreateClassDtoFluentValidator validator = new();
    Dictionary<string, bool> touchedFields = new();
    private string? _currentUserId;

    bool HasTouched(string fieldName) => touchedFields.TryGetValue(fieldName, out var touched) && touched;
    void SetTouched(string fieldName) => touchedFields[fieldName] = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        _currentUserId = authState.User.Identity?.Name?.Split('\\').Last();
    }

    private async Task HandleValidSubmit()
    {
        if (form is null || string.IsNullOrWhiteSpace(_currentUserId)) return;

        await form.Validate();
        if (!success) return;

        try
        {
            var currentUser = await UserService.GetOrCreateCurrentUserAsync(_currentUserId);
            await UseCase.ExecuteAsync(formModel, currentUser.UserID);

            Snackbar.Add("Class successfully created!", Severity.Success);
        }
        catch (UnauthorizedAccessException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            return;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to create class: " + ex.Message, Severity.Error);
            return;
        }

        formModel = new CreateClassDto();
        touchedFields.Clear();
        form.ResetValidation();
        NavigationManager.NavigateTo("/");
    }
}