@page "/register"
@using ClassRegistrationApplication2025.Application.DTOs
@using ClassRegistrationApplication2025.Infrastructure.Persistence.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MudBlazor
@inject AuthenticationStateProvider AuthProvider
@inject IUserService UserService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

@code {
    private UserDto? CurrentUser;
    private ClaimsPrincipal? _principal;
    private bool _isRedirecting;
    private bool _success;
    private bool _initializing = false;
    private bool _shouldNotify = false;

    protected override async Task OnInitializedAsync()
    {
        if (_initializing) return;
        _initializing = true;

        _principal = (await AuthProvider.GetAuthenticationStateAsync()).User;

        // if (!_principal.Identity?.IsAuthenticated ?? true)
        // {
        //     _isRedirecting = true;
        //     return;
        // }

        try
        {
            var adUserId = _principal?.Identity?.Name ?? Guid.NewGuid().ToString();

            CurrentUser = await UserService.GetOrCreateCurrentUserAsync(adUserId);

            _ = Task.Run(async () =>
            {
            await Task.Delay(100); // let render finish
            Snackbar.Add("Registration successful!", Severity.Success);
            await Task.Delay(1500);
            Navigation.NavigateTo("/");
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Registration error: {ex.Message}");
            _isRedirecting = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_isRedirecting)
        {
            Navigation.NavigateTo("/Error");
        }

        if (_shouldNotify)
        {
            _shouldNotify = false;
            Snackbar.Add("Registration successful!", Severity.Success);
            await Task.Delay(1500);
            Navigation.NavigateTo("/");
        }
    }
}
