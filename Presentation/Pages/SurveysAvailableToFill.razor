@page "/surveysavailable"
@using ClassRegistrationApplication2025.Application.DTOs
@using ClassRegistrationApplication2025.Application.Interfaces
@using ClassRegistrationApplication2025.Application.Services
@using ClassRegistrationApplication2025.Infrastructure.Persistence.Interfaces
@using ClassRegistrationApplication2025.Infrastructure.Persistence.Repositories
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor

@inject IGetAvailableClassSurveysForUserUseCase UseCase
@inject IGetAvailableSubjectSurveysForUserUseCase SubjectUseCase
@inject ISurveyResponseService SurveyResponseService
@inject IUserService CurrentUser
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthProvider

<title>Available Surveys</title>

<CascadingAuthenticationState>

    <MudContainer Class="mt-6">

        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else
        {
            <MudText Typo="Typo.h6" Class="mb-2">Available Surveys</MudText>

            @if (!AllAvailableSurveys.Any())
            {
                <MudText>No surveys available for you right now.</MudText>
            }
            else
            {
                <MudTable Items="AllAvailableSurveys" Dense="true">
                    <HeaderContent>
                        <MudTh>Title</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh>Created</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Title</MudTd>
                        <MudTd>@context.Description</MudTd>
                        <MudTd>@context.CreatedAt.ToShortDateString()</MudTd>
                        <MudTd>
                            @if (IsSubmitted(context.Id))
                            {
                                <MudButton Size="Size.Small" Disabled="true" Color="Color.Secondary">
                                    Already Filled
                                </MudButton>
                            }
                            else
                            {
                                <MudButton Size="Size.Small" Color="Color.Primary" OnClick="@(() => GoToFillSurvey(context.Id))">
                                    Fill
                                </MudButton>
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        }
    </MudContainer>
</CascadingAuthenticationState>

@code {
    private List<ClassSurveyDto> AvailableClassSurveys = new();
    private List<SubjectSurveyDto> AvailableSubjectSurveys = new();
    private List<ISurveyBaseDto> AllAvailableSurveys = new();
    private HashSet<Guid> SubmittedSurveyIds = new();
    private UserDto currentUser;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var userIdString = authState.User.Identity?.Name?.Split('\\').Last();

            if (!string.IsNullOrEmpty(userIdString))
            {
                currentUser = await CurrentUser.GetOrCreateCurrentUserAsync(userIdString);

                AvailableClassSurveys = await UseCase.ExecuteAsync(currentUser.Id, default);
                AvailableSubjectSurveys = await SubjectUseCase.ExecuteAsync(currentUser.Id, default);

                AllAvailableSurveys = AvailableClassSurveys
                    .Cast<ISurveyBaseDto>()
                    .Concat(AvailableSubjectSurveys.Cast<ISurveyBaseDto>())
                    .OrderBy(s => s.CreatedAt)
                    .ToList();

                foreach (var survey in AvailableClassSurveys)
                {
                    var existingResponse = await SurveyResponseService.GetResponseAsync(survey.Id, currentUser.Id);
                    if (existingResponse is not null)
                        SubmittedSurveyIds.Add(survey.Id);
                }

                foreach (var survey in AvailableSubjectSurveys)
                {
                    var existingResponse = await SurveyResponseService.GetResponseAsync(survey.Id, currentUser.Id);
                    if (existingResponse is not null)
                        SubmittedSurveyIds.Add(survey.Id);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load surveys: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    void GoToFillSurvey(Guid id)
    {
        Nav.NavigateTo($"/surveys/fill/{id}");
    }

    private bool IsSubmitted(Guid surveyId) => SubmittedSurveyIds.Contains(surveyId);
}
