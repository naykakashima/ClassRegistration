@using ClassRegistrationApplication2025.Application.DTOs
@using ClassRegistrationApplication2025.Application.UseCases
@using ClassRegistrationApplication2025.Domain.Enums
@using ClassRegistrationApplication2025.Infrastructure.Persistence.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor

@inject RegisterForClassUseCase RegisterUseCase
@inject GetRegisteredUsersUseCase GetRegisteredUsersUseCase
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavManager
@inject IUserService UserService
@inject ISnackbar Snackbar

<MudTable Items="Classes" Hover="true" Bordered="true" Dense="true" SortLabel="Sort By">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="@(new Func<ClassSummaryDto, object>(x => x.ClassName))" InitialDirection="SortDirection.Ascending">
                Class Name
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            Attendance
        </MudTh>
        <MudTh>
            Survey
        </MudTh>
        <MudTh>
            Edit/Delete Class
        </MudTh>
        <MudTh>
            Export Excel
        </MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Class Name">@context.ClassName (@context.SessionName) </MudTd>
        <MudTd DataLabel="Registered Users">
            <MudButton Variant="Variant.Filled"
                       Size="Size.Small"
                       OnClick="@(() => OnViewUsers.InvokeAsync(context.Id))"
                       EndIcon="@Icons.Material.Filled.PersonSearch">
                Registrations
            </MudButton>
        </MudTd>
        <MudTd DataLabel="Survey">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Secondary"
                       Size="Size.Small"
                       OnClick="@(() => OnSurvey.InvokeAsync(context.Id))"
                       EndIcon="@Icons.Material.Filled.Build">
                Survey Builder
            </MudButton>
        </MudTd>
        <MudTd DataLabel="Edit Class">
            <MudButton Variant="Variant.Filled"
                       Style="background-color: yellowgreen; color: white; d-flex justify-center align-center"
                       Size="Size.Small"
                       OnClick="@(() => OnEdit.InvokeAsync(context.Id))"
                       EndIcon="@Icons.Material.Filled.Edit">
                Edit
            </MudButton>
        </MudTd>
        <MudTd DataLabel="Export Excel">
            @if (context.RegisteredCount == 0)
            {
                <MudTooltip Text="No registrations to export">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Small"
                               Disabled="true"
                               EndIcon="@Icons.Material.Filled.Download">
                        Download Excel
                    </MudButton>
                </MudTooltip>
            }
            else
            {
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Small"
                           OnClick="@(() => OnDownloadExcel.InvokeAsync(context.Id))"
                           EndIcon="@Icons.Material.Filled.Download">
                    Download Excel
                </MudButton>
            }
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter]
    public List<ClassSummaryDto> Classes { get; set; } = new();

    [Parameter]
    public EventCallback<Guid> OnEdit { get; set; }
    [Parameter]
    public EventCallback<Guid> OnSurvey { get; set; }
    [Parameter]
    public EventCallback<Guid> OnViewUsers { get; set; }
    [Parameter]
    public EventCallback<Guid> OnDownloadExcel { get; set; }

    private List<RegisteredUsersDto> Users;

    public Guid ClassId { get; set; }

    private string? _currentUserId;
    private UserDto? _currentUser;

    private bool isLoading = true;

    private Color GetStatusColor(ClassStatus status)
    {
        return status switch
        {
            ClassStatus.Open => Color.Success,
            ClassStatus.Closed => Color.Error,
            _ => Color.Default  // Handle any unexpected status
        };
    }

    private double GetProgressPercentage(ClassSummaryDto classItem)
    {
        if (classItem.MaxSlots == 0) return 0;
        return (classItem.RegisteredCount * 100.0) / classItem.MaxSlots;
    }

    private Color GetProgressColor(ClassSummaryDto classItem)
    {
        if (classItem.Status != ClassStatus.Open)
            return Color.Default;

        var percentage = GetProgressPercentage(classItem);
        return percentage switch
        {
            >= 90 => Color.Error,
            >= 75 => Color.Warning,
            _ => Color.Success
        };
    }
}