@using ClassRegistrationApplication2025.Application.DTOs
@using ClassRegistrationApplication2025.Application.UseCases
@using ClassRegistrationApplication2025.Infrastructure.Persistence.Interfaces
@inject IEmailService EmailService
@inject ISnackbar Snackbar
@inject IConfiguration Config
@inject GetAllClassesBySubjectIdUseCase GetAllClassesBySubjectIdUseCase
@inject GetRegisteredUsersUseCase GetRegisteredUsersUseCase

<MudDialog>
    <DialogContent>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else if (Classes == null || !Classes.Any())
        {
            <MudText>No classes found for this subject.</MudText>
        }
        else
        {
            <MudExpansionPanels MultiExpansion="true">
                @foreach (var classItem in Classes)
                {
                    <MudExpansionPanel Text="@($"{classItem.ClassName} - {classItem.SessionName}")" 
                                       ExpandedChanged="@(expanded => OnPanelExpanded(expanded, classItem.Id))">
                        @if (IsUserLoading.TryGetValue(classItem.Id, out var loading) && loading)
                        {
                            <MudProgressCircular Indeterminate="true" />
                        }
                        else if (RegisteredUsers.TryGetValue(classItem.Id, out var users))
                        {
                            @if (users == null || users.Count == 0)
                            {
                                <MudText>No registered users found.</MudText>
                            }
                            else
                            {
                                <MudList T="string">
                                    @foreach (var user in users)
                                    {
                                        <MudListItem>
                                            <MudStack Row="true" Class="d-flex justify-space-between">
                                                <MudText Typo="Typo.body1">@user.Dto.UserName</MudText>

                                                <MudStack Spacing="1">
                                                    <MudButton OnClick="@(() => SendSurveyInvite(user))"
                                                               Color="Color.Secondary" Variant="Variant.Outlined"
                                                               Size="Size.Small" StartIcon="@Icons.Material.Filled.Email">
                                                        Send Survey
                                                    </MudButton>

                                                    <MudTextField @bind-Value="user.CustomSurveyUrl"
                                                                  Placeholder="Optional custom URL"
                                                                  HelperText="Leave empty to use default"
                                                                  Immediate="true" />
                                                </MudStack>
                                            </MudStack>
                                        </MudListItem>
                                    }



                                </MudList>
                                
                            }
                        }
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        }
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Close" Color="Color.Primary">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public Guid SubjectId { get; set; }
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }

    private List<ClassSummaryDto> Classes;
    private Dictionary<Guid, List<RegisteredUserViewModel>> RegisteredUsers = new();
    private Dictionary<Guid, bool> IsUserLoading = new();

    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Classes = await GetAllClassesBySubjectIdUseCase.ExecuteAsync(SubjectId);
        }
        catch (Exception ex)
        {
            // optionally Snackbar if you inject it
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnPanelExpanded(bool expanded, Guid classId)
    {
        if (!expanded || RegisteredUsers.ContainsKey(classId))
            return;

        IsUserLoading[classId] = true;

        try
        {
            var users = await GetRegisteredUsersUseCase.ExecuteAsync(classId);
            RegisteredUsers[classId] = users?
                .Select(dto => new RegisteredUserViewModel
                {
                    Dto = dto,
                    CustomSurveyUrl = string.Empty
                }).ToList() ?? new();
        }
        catch
        {
            RegisteredUsers[classId] = new(); // fallback to avoid null issues
        }
        finally
        {
            IsUserLoading[classId] = false;
            StateHasChanged();
        }
    }

    private async Task SendSurveyInvite(RegisteredUserViewModel user)
    {
        try
        {
            var userDto = new UserDto
            {
                Id = user.Dto.Id,
                Name = user.Dto.UserName,
                EmailSMTP = user.Dto.EmailSMTP
            };

            var url = !string.IsNullOrWhiteSpace(user.CustomSurveyUrl)
                ? user.CustomSurveyUrl
                : $"{Config["Survey:InviteUrl"]}?classId={SubjectId}";

            await EmailService.SendSurveyInviteAsync(userDto, url);

            Snackbar.Add($"Survey invite sent to {user.Dto.UserName}", MudBlazor.Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to send survey to {user.Dto.UserName}: {ex.Message}", MudBlazor.Severity.Error);
        }
    }


    private void Close() => MudDialog.Cancel();
}

