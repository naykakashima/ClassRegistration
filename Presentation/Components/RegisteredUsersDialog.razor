@using ClassRegistrationApplication2025.Application.DTOs
@using ClassRegistrationApplication2025.Application.UseCases

@inject GetRegisteredUsersUseCase GetRegisteredUsersUseCase
@inject UpdateAttendanceUseCase UpdateAttendanceUseCase
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        @if (isLoading)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else if (Users == null || !Users.Any())
        {
            <MudText>No registered users found.</MudText>
        }
        else
        {
            <MudTable Items="Users" Hover="true" Dense="true" Bordered="true">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Attended</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.UserName</MudTd>
                    <MudTd>@context.EmailSMTP</MudTd>
                    <MudTd>
                        <MudCheckBox T="bool"
                                     @bind-Value="context.IsAttended" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="SaveAttendance" Disabled="saveInProgress">
            @if (saveInProgress)
            {
                <MudProgressCircular Size="Size.Small" Color="Color.Inherit" />
                <span style="margin-left: 8px">Saving...</span>
            }
            else
            {
                <span>Save</span>
            }
        </MudButton>
        <MudButton OnClick="MudDialog.Cancel" Disabled="saveInProgress">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public Guid ClassId { get; set; }
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }

    private List<RegisteredUsersDto> Users = new();
    private bool isLoading = true;
    private bool saveInProgress = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Users = await GetRegisteredUsersUseCase.ExecuteAsync(ClassId);

            // Ensure IsAttended reflects the actual AttendedAt status
            foreach (var user in Users)
            {
                // This will automatically set IsAttended based on AttendedAt
                user.IsAttended = user.AttendedAt.HasValue;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading attendance data: {ex.Message}", MudBlazor.Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveAttendance()
    {
        saveInProgress = true;

        try
        {
            var updates = Users
                .Select(u => new AttendanceUpdateDto
                {
                    RegistrationId = u.RegistrationId,
                    AttendedAt = u.IsAttended ? DateTime.UtcNow : null
                })
                .ToList();

            await UpdateAttendanceUseCase.ExecuteAsync(updates, CancellationToken.None);

            Snackbar.Add("Attendance saved successfully.", MudBlazor.Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to save attendance: {ex.Message}", MudBlazor.Severity.Error);
        }
        finally
        {
            saveInProgress = false;
        }
    }
}