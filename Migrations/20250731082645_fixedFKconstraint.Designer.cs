// <auto-generated />
using System;
using ClassRegistrationApplication2025.Infrastructure.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassRegistrationApplication2025.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250731082645_fixedFKconstraint")]
    partial class fixedFKconstraint
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("MaxSlots")
                        .HasColumnType("int");

                    b.Property<string>("Presenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.Registration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailSMTP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.SurveyBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonDefinition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurveyType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Surveys");

                    b.HasDiscriminator<string>("SurveyType").HasValue("SurveyBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.SurveyResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JsonAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("SurveyId", "UserId")
                        .IsUnique();

                    b.ToTable("SurveyResponses");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailSMTP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.ClassSurvey", b =>
                {
                    b.HasBaseType("ClassRegistrationApplication2025.Domain.Entities.SurveyBase");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ClassId")
                        .IsUnique()
                        .HasFilter("[ClassId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ClassSurvey");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.SubjectSurvey", b =>
                {
                    b.HasBaseType("ClassRegistrationApplication2025.Domain.Entities.SurveyBase");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("SubjectId")
                        .IsUnique()
                        .HasFilter("[SubjectId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("SubjectSurvey");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.Class", b =>
                {
                    b.HasOne("ClassRegistrationApplication2025.Domain.Entities.User", "CreatedByUser")
                        .WithMany("ClassesCreated")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClassRegistrationApplication2025.Domain.Entities.Subject", "Subject")
                        .WithMany("Classes")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.Registration", b =>
                {
                    b.HasOne("ClassRegistrationApplication2025.Domain.Entities.Class", "Class")
                        .WithMany("Registrations")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassRegistrationApplication2025.Domain.Entities.User", "User")
                        .WithMany("Registrations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.SurveyBase", b =>
                {
                    b.HasOne("ClassRegistrationApplication2025.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.SurveyResponse", b =>
                {
                    b.HasOne("ClassRegistrationApplication2025.Domain.Entities.SurveyBase", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassRegistrationApplication2025.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.ClassSurvey", b =>
                {
                    b.HasOne("ClassRegistrationApplication2025.Domain.Entities.Class", "Class")
                        .WithOne("Survey")
                        .HasForeignKey("ClassRegistrationApplication2025.Domain.Entities.ClassSurvey", "ClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.SubjectSurvey", b =>
                {
                    b.HasOne("ClassRegistrationApplication2025.Domain.Entities.Subject", "Subject")
                        .WithOne("Survey")
                        .HasForeignKey("ClassRegistrationApplication2025.Domain.Entities.SubjectSurvey", "SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.Class", b =>
                {
                    b.Navigation("Registrations");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("ClassRegistrationApplication2025.Domain.Entities.User", b =>
                {
                    b.Navigation("ClassesCreated");

                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
